#!/bin/bash
#
# acurl: curl wrapper that uses get_token for Bearer authentication
# See usage_warning() below for details.
#
# Environment variables:
# SSO_LOGIN_URL required, e.g. https://login.apigee.com
# ACURL_TEST optional, for testing
# - if non-zero, outputs split arguments for get_token and curl
# - if "exit", then exits instead of calling curl
#

NONE='\033[00m'
RED='\033[01;31m'
GREEN='\033[01;32m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
LIGHT_BLUE='\033[01;34m'

CLIENT_CLI_VERSION=2.2

usage_warning(){
  echo -e "
 ${BOLD}'acurl'${NONE} is an extension to the 'curl' command-line utility
  enabling the ${UNDERLINE}user to make API calls with HTTP ${BOLD}Bearer ${UNDERLINE}authentication tokens${NONE}.
  acurl uses OAuth 2.0 'grant_type=password' and fetches the Bearer tokens by
  exchanging the Basic authentication credentials.

  Each Bearer token is an OAuth access token, paired with a refresh token.
  You must provide credentials for a new token pair. Once the token pair is
  obtained, you may call repeatedly without credentials. The utility will
  update the access token if necessary, until the refresh token expires.

  Usage: ${GREEN}acurl API_URL [curl options] -u USERNAME:PASSWORD [-m MFACODE]${NONE}
     or  ${GREEN}acurl API_URL [curl options] -p PASSCODE${NONE}
         ${GREEN}acurl API_URL [curl options] ${NONE}

    API_URL   URL at api.enterprise.apigee.com or your Private Cloud
    USERNAME  Your Apigee username, an email address
    PASSWORD  Your Apigee password
    MFACODE   A recent 6-digit Multi-Factor Authentication code or ''
    PASSCODE  A recent 6-character \"Temporary Authentication Code\"

  Environment variable SSO_LOGIN_URL is ${BOLD}${SSO_LOGIN_URL:-"${RED}not set"}${NONE}

  If you use your company's credentials to login, please get a one-time code
  to use as the PASSCODE instead of using your username and password:
    ${SSO_LOGIN_URL:-"${RED}\$SSO_LOGIN_URL${NONE}"}/passcode

  Examples:
    acurl http://10.0.199.11:8080/v1/o -u me@example.com:Secret123 -m 123456
    acurl https://api.enterprise.apigee.com/v1/o -p P0En9F

  ${BOLD}Notes:${NONE}
  If any parameters are omitted, you will be prompted to enter them. Please
  refer to the Apigee documentation for additional details and examples:
  https://docs.apigee.com/api-services/content/using-oauth2-security-apigee-edge-management-api

  Tokens will be generated and stored locally under \$HOME/.sso-cli

  Long-form option equivalents for 'curl'
    -m  --max-time
    -p  --proxytunnel

  This is Client CLI version: ${CLIENT_CLI_VERSION}
"
}

get_token_args=()
curl_args=()
while (( $# > 0 )); do
  case "$1" in
    -[ump])
      if [[ "$2" == "-"* ]]; then
        >&2 echo "$1 missing argument"
        exit 2
      fi
      get_token_args+=("$1" "$2")
      shift 2 || shift
      ;;
    -h)
      usage_warning
      exit 1
      ;;
    -H)
      if [[ "$2" == [Aa]"uthorization:"* ]]; then
        shift 2
      else
        curl_args+=("$1")
        shift
      fi
      ;;
    -v)
      get_token_args+=("$1")
      curl_args+=("$1")
      shift
      ;;
    --force-basic-auth)
      get_token_args+=("$1")
      shift
      ;;
    *)
      curl_args+=("$1")
      shift
      ;;
  esac
done

if [[ -n "${ACURL_TEST}" ]]; then
  >&2 printf 'get_token %s\n' "${get_token_args[@]}"
  >&2 printf 'curl %s\n' "${curl_args[@]}"
  if [[ "${ACURL_TEST}" == "exit" ]]; then
    exit 100
  fi
fi

# use GET_TOKEN_RESULT twice: briefly here to store the location of get_token;
# and as non-zero variable to indicate token should be stored there instead of
# output to stdout when get_token is sourced
install_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [[ -f "${install_dir}/get_token" ]]; then
  GET_TOKEN_RESULT="${install_dir}/get_token"
else
  >&2 echo "acurl: get_token not found in ${install_dir}"
  exit 101
fi

if source "${GET_TOKEN_RESULT}" "${get_token_args[@]}"; then
  curl -H "Authorization: Bearer ${GET_TOKEN_RESULT}" "${curl_args[@]}"
fi
